@page "/Important"

@using System.Globalization
@using Microsoft.AspNetCore.Components.Web

<div class="athena-dia-background">
    <h3 class="athena-title"><i class="far fa-star"></i> Importantes</h3>
    <div class="athena-list">
        @if (Tarefas != null)
        {
            <ul class="list-group list-group-flush">
                @foreach (var tarefa in Tarefas.Where(x => !x.Finished).OrderByDescending(x => x.Important))
                {
                    <li class="athena-dia-list-group list-group-item list-group-item-action" style="border-radius: 4px;">

                        <ContextMenuTrigger MenuId="menuToDo" Data="tarefa">

                            <div class="custom-control custom-checkbox">
                                <input type="checkbox" id="ToDoItem_@tarefa.Id" @onclick="@(e => HandleFinished(tarefa.Id))" name="ToDoItem_@tarefa.Id" class="custom-control-input" checked="@tarefa.Finished">
                                <label class="custom-control-label" for="ToDoItem_@tarefa.Id">@tarefa.Description</label>
                                @if (tarefa.DeadLine.HasValue)
                                {
                                    <label>
                                        &bull;
                                        <i class="far fa-calendar"></i> @tarefa.ExtenseDeadLine(tarefa.DeadLine.Value)
                                    </label>
                                }

                                @if (tarefa.Important)
                                {
                                    <i class="fas fa-star" @onclick="@(e => HandleImportant(tarefa.Id))"></i>
                                }
                                else
                                {
                                    <i class="far fa-star" @onclick="@(e => HandleImportant(tarefa.Id))"></i>
                                }
                            </div>
                        </ContextMenuTrigger>
                    </li>
                }
            </ul>
            if (Tarefas.Any(x => x.Finished))
            {
                <a class="btn athena-dia-finished-button btn-sm" href="javascript:;" @onclick="@(e => ShowFinished = !ShowFinished)">
                    @if (ShowFinished)
                    {

                        <i class="fas fa-chevron-down"></i>
                    }
                    else
                    {
                        <i class="fas fa-chevron-right"></i>
                    }
                    Concluída
                </a>
                @if (ShowFinished)
                {
                    <ul class="list-group list-group-flush">
                        @foreach (var tarefa in Tarefas.Where(x => x.Finished).OrderByDescending(x => x.Important))
                        {
                            <li class="athena-dia-list-group list-group-item list-group-item-action" style="border-radius: 4px;">
                                <ContextMenuTrigger MenuId="menuToDo" Data="tarefa">
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" id="ToDoItem_@tarefa.Id" @onclick="@(e => HandleFinished(tarefa.Id))" name="ToDoItem_@tarefa.Id" class="custom-control-input" checked="@tarefa.Finished">
                                        <label class="custom-control-label" for="ToDoItem_@tarefa.Id">@tarefa.Description</label>
                                        @if (tarefa.DeadLine.HasValue)
                                        {
                                            <label>
                                                &bull;
                                                <i class="far fa-calendar"></i> @tarefa.ExtenseDeadLine(tarefa.DeadLine.Value)
                                            </label>
                                        }

                                        @if (tarefa.Important)
                                        {
                                            <i class="fas fa-star" @onclick="@(e => HandleImportant(tarefa.Id))"></i>
                                        }
                                        else
                                        {
                                            <i class="far fa-star" @onclick="@(e => HandleImportant(tarefa.Id))"></i>
                                        }
                                    </div>
                                </ContextMenuTrigger>
                            </li>
                        }
                    </ul>
                }
            }
        }
    </div>
    <div class="container athena-workspace">
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="athena-add-input input-group-text">
                    <i class="fas fa-plus"></i>
                </span>
            </div>
            <input class="form-control athena-add-input" placeholder="Adicionar uma Tarefa" @bind="TarefaAtual" @bind:event="oninput" @onkeypress="HandleKeyPress" />
        </div>
    </div>

</div>

<ContextMenu Id="menuToDo">
    <Item><i class="fas fa-unlink"></i>Remover de Meu Dia</Item>
    <Item OnClick="@(e => HandleImportant((e.Data as ToDo).Id))">
        <i class="far fa-star"></i> Marcar como Importante
    </Item>
    <Item OnClick="@(e => HandleFinished((e.Data as ToDo).Id))"><i class="far fa-check-circle"></i> Marcar como Concluída</Item>
    <Seperator></Seperator>
    <Item OnClick="@(e => HandleDeadLine((e.Data as ToDo).Id, DateTime.Now))"><i class="far fa-calendar-check"></i> Concluir hoje</Item>
    <Item OnClick="@(e => HandleDeadLine((e.Data as ToDo).Id, DateTime.Now.AddDays(1)))"><i class="far fa-calendar-minus"></i> Concluir Amanhã</Item>
    <Item><i class="far fa-calendar-alt"></i> Escolher uma data</Item>
    <Seperator></Seperator>
    <Item><i class="fas fa-tasks"></i> Mover Tarefa Para...</Item>
    <Item OnClick="@(e => Delete(e.Data as ToDo))"><div style="color: red"><i class="far fa-trash-alt"></i> Excluir Tarefa</div></Item>
</ContextMenu>

<ContextMenu Id="menuData">

</ContextMenu>

@code{
    private bool ShowFinished = true;
    private string TarefaAtual { get; set; }


    protected override void OnInitialized()
    {
        if (toDoController == null) toDoController = new ToDoController(config);
        Tarefas = toDoController.GetAll(x => x.Important);
    }

    async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") Adicionar();
    }

}